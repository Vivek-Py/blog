I"»<p>I‚Äôve been working on React for months now, since the I‚Äôve used tons of react libraries. To my belief, I‚Äôve seen quite new tools slowly replacing old libraires.</p>

<p><img src="../images/react-libraries.png" alt="React Libraries" /></p>

<h1 id="for-components">For Components</h1>

<p>Component libraries help us develop better when we don‚Äôt have strong styling directives. Most of the time, they provide us with additional features and remove a lot of biolerplate code.</p>

<h2 id="1-ant-design">1. Ant Design</h2>

<p>This react component provides some enterprise-level products. You don‚Äôt need to worry about ‚Äúnot being able to do the component‚Äù You‚Äôll be able to get it done.</p>

<p>Another thing to note is that Ant Design is a design system. It is meant to be opinionated. Overall, it is a fun to use compared to Material UI. There‚Äôs still some things I don‚Äôt like about Ant Design. If you want to customize Ant Design theme you need to change variables during your build. To me it feels like a lot of work for little things like changing colors.</p>

<h2 id="2-material-ui">2. Material UI</h2>

<p>If I were not to use Ant Design, Material-UI would be the second choice. It‚Äôs components are for faster and easier web development. You can even build your own design system, or start with Material Design.</p>

<h1 id="for-icons">For Icons</h1>

<h2 id="1-react-feather">1. React Feather</h2>

<p>React-feather is a collection of simply beautiful open source icons for React.js. Each icon is designed on a 24x24 grid with an emphasis on simplicity, consistency, and readability.</p>

<p>React-feather is also a collection of SVG files so you can use them in any way (image, background image, object, inline, etc.) depending upon the need. Overall, I prefer it over others.</p>

<h2 id="2-material-ui-icons">2. Material UI Icons</h2>

<p>It is a complete React UI framework and it provides one of the best icons support in three following ways:</p>

<ul>
  <li>Standardized Material Design Icons exported as React Components (SVG).</li>
  <li>With the SVG Icon component, a React wrapper for custom SVG icons.</li>
  <li>With the Icon components, a React wrapper for custom font icons.</li>
</ul>

<h1 id="for-state-management">For state management</h1>

<h2 id="1-redux">1. Redux</h2>

<p>You already knew this was coming, right? So, yes - Redux is de-facto ‚Äúthe default‚Äù of its kind. But it starts to ‚Äúshow its age‚Äù and if not that, then to irritate some devs. Don‚Äôt get me wrong - it‚Äôs a great library, but its size, steep learning curve, and verbose action-reducer approach to state management can make some people want to switch.</p>

<h2 id="2-hookstate">2. Hookstate</h2>

<p>It‚Äôs the underdog of the state-management libraries. It‚Äôs small, minimal, clean, extendable, and it has a lovely hook-based API. Not only can it be used for global state, but can also enhance local <code class="language-plaintext highlighter-rouge">useState()</code> with additional features, handle nested state without performance loss, and deal with async data with ease!</p>

<h2 id="conclusion">Conclusion</h2>

<p>Those were all my favourites, what‚Äôs your? Let me know on Twitter. Thank you for taking the time to read my blog.</p>
:ET